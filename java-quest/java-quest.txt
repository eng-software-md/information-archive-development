Perguntas e Respostas Java


[1] O que é Java?
 Java é uma linguagem de programação orientada a objetos, robusta, multiplataforma, de tipagem forte e amplamente utilizada para o desenvolvimento de aplicações desktop, web, mobile e sistemas embarcados.

[2] Qual é a diferença entre Java e JavaScript?
 Java é uma linguagem de propósito geral, compilada, orientada a objetos, usada também em backend e aplicações grandes.
 JavaScript é uma linguagem interpretada, utilizada principalmente para scripts em páginas web no lado cliente (embora também possa ser utilizada no backend com Node.js).

[3] Qual é o princípio básico da programação Java?
 O princípio básico é a Orientação a Objetos, baseada em conceitos como classes, objetos, abstração, encapsulamento, herança e polimorfismo.

[4] Quais são as principais características do Java?
 Portabilidade (write once, run anywhere), segurança, robustez, orientação a objetos, gerenciamento automático de memória (garbage collection) e grande biblioteca padrão (Java API).

[5] O que é uma classe em Java?
 É um molde ou estrutura que define os atributos (variáveis) e métodos (comportamentos) que os objetos daquele tipo terão.

[6] O que é um objeto em Java?
 É uma instância de uma classe, contendo valores específicos para seus atributos e sendo capaz de executar métodos definidos na classe.

[7] O que é um método em Java?
 Método é uma função que faz parte de uma classe/objeto, responsável por realizar ações ou calcular valores.

[8] Qual é a diferença entre uma classe e um objeto?
 Classe é o projeto (definição), e objeto é a concretização desse projeto (instância em memória).

[9] O que é herança em Java?
 É o mecanismo que permite que uma classe (subclasse) receba os atributos e métodos de outra classe (superclasse), promovendo reutilização de código.

[10] Quais são os tipos de herança em Java?
 - Herança simples (de uma única classe)
 - Herança hierárquica (uma superclasse com várias subclasses)
 Obs.: Java não permite herança múltipla de classes (apenas de interfaces).

===============================================================================================================

[11] O que é polimorfismo em Java?
 Capacidade de tratar objetos de diferentes classes derivadas de forma uniforme, permitindo que métodos com mesmo nome possam ter comportamentos diferentes.

[12] O que são modificadores de acesso em Java?
 Palavras-chave que controlam a visibilidade de atributos, métodos e classes (`public`, `private`, `protected` e default/pacote).

[13] O que é encapsulamento em Java?
 É o princípio de esconder informações internas do objeto e expor apenas o necessário, geralmente usando modificadores de acesso.

[14] O que é um construtor em Java?
 Método especial chamado ao criar um objeto, com o mesmo nome da classe, que inicializa os atributos.

[15] Qual é a diferença entre um construtor e um método?
 Construtor é chamado automaticamente ao criar o objeto e não tem tipo de retorno; método é chamado explicitamente e define um tipo de retorno.

[16] O que é a Máquina Virtual Java (JVM)?
 É o ambiente de execução responsável por interpretar e executar o bytecode Java em qualquer sistema operacional.

[17] O que é o Java Development Kit (JDK)?
 É o kit de desenvolvimento Java, incluindo compilador, ferramentas e biblioteca padrão para criar aplicações Java.

[18] Qual é a diferença entre o JDK e o JRE?
 JDK inclui o JRE mais ferramentas de desenvolvimento; JRE contém apenas o necessário para executar aplicações Java.

[19] O que é um pacote em Java?
 É uma forma de organizar as classes em namespaces, evitando conflitos de nomes e facilitando a estruturação do projeto.

[20] Qual é a diferença entre uma classe abstrata e uma interface?
 Classe abstrata pode ter métodos implementados e atributos; interface só define métodos (sem implementação até Java 8, que permitiu métodos default/static).

===============================================================================================================

[21] O que é um método estático em Java?
 Método que pertence à classe (não ao objeto) e pode ser chamado sem instanciar a classe.

[22] Para que serve a palavra-chave “final” em Java?
 Torna algo imutável:
 - class: não pode ser herdada
 - método: não pode ser sobrescrito
 - variável: valor não pode ser alterado

[23] O que é sobrecarga de método em Java?
 Definição de vários métodos com o mesmo nome, mas com diferentes parâmetros.

[24] O que é substituição de método em Java?
 Quando uma subclasse implementa novamente um método já definido na superclasse, alterando seu comportamento (usa-se @Override).

[25] Qual é a diferença entre sobrecarga de método e substituição de método?
 Sobrecarga (Overload): mesmo nome, diferentes parâmetros, mesma classe.
 Substituição (Override): mesmo nome, mesma assinatura, mas em classes diferentes (herança).

[26] O que é a palavra-chave “this” em Java?
 Refere-se ao próprio objeto da classe atual.

[27] O que é uma variável estática em Java?
 Variável de classe, compartilhada entre todas as instâncias.

[28] Qual é a finalidade da palavra-chave “final” nos parâmetros do método?
 Evita que o valor do parâmetro seja modificado dentro do método.

[29] Qual é o propósito da palavra-chave “static” em Java?
 Define membros de classe (atributos e métodos) sem a necessidade de um objeto.

[30] Qual é a diferença entre “==” e “.equals()” em Java?
 “==” compara referências (endereços de memória); “.equals()” compara conteúdos (caso esteja sobrescrito corretamente para esse propósito).

===============================================================================================================

[31] Qual é o propósito da palavra-chave “super” em Java?
Permite acessar métodos e atributos da superclasse a partir de uma subclasse, além de ser utilizada para chamar o construtor da classe pai.

[32] O que é uma thread em Java?
Thread é uma unidade de execução independente, ou seja, um fluxo separado dentro de um programa, permitindo paralelismo e multitarefa.

[33] Como você cria e inicia um thread em Java?
Pode-se estender a classe `Thread` e sobrescrever o método `run()`, ou implementar a interface `Runnable` e passar para um objeto `Thread`. Para iniciar, chama-se o método `start()`.

[34] O que é sincronização em Java?
Sincronização é o mecanismo para controlar o acesso de múltiplas threads a um recurso compartilhado, evitando problemas de concorrência e dados inconsistentes.

[35] Qual é a diferença entre o bloco “sincronizado” e o método “sincronizado”?
O bloco sincronizado restringe a sincronização apenas a parte do código escolhida, enquanto o método sincronizado sincroniza toda a execução do método.

[36] Qual é o propósito da palavra-chave “volatile” em Java?
Garante que mudanças realizadas em uma variável por uma thread sejam visíveis imediatamente para outras threads.

[37] O que é uma exceção em Java?
É um evento que interrompe o fluxo normal do programa, sinalizando erros que podem ser tratados pelo código.

[38] Qual é a diferença entre exceções verificadas e não verificadas?
Exceções verificadas (checked) precisam ser tratadas ou declaradas no método; exceções não verificadas (unchecked) são subclasses de `RuntimeException` e não exigem tratamento obrigatório.

[39] Como você lida com exceções em Java?
Utilizando blocos `try-catch` para capturar e tratar exceções, e opcionalmente `finally` para executar um bloco obrigatoriamente ao final.

[40] Qual é o propósito do bloco “finally” no tratamento de exceções?
Executar código de limpeza ou encerramento, independentemente de ter ocorrido exceção ou não.

===============================================================================================================

[41] Qual é a diferença entre as palavras-chave “throw” e “throws” em Java?
`throw` é usado para lançar explicitamente uma exceção;
`throws` declara que um método pode lançar exceções que devem ser tratadas ou propagadas.

[42] Qual é a diferença entre exceções verificadas e exceções de tempo de execução?
Exceções verificadas (checked) são verificadas em tempo de compilação, enquanto exceções de tempo de execução (unchecked) são detectadas apenas em tempo de execução.

[43] O que é a API Java?
É o conjunto de bibliotecas e interfaces fornecidas pela linguagem Java para facilitar o desenvolvimento de aplicações.

[44] Qual é a diferença entre uma ArrayList e uma LinkedList?
`ArrayList` é baseada em arrays e oferece acesso rápido por índice, mas inserções/remover no meio é lento;
`LinkedList` é baseada em lista ligada, com inserções/remoções rápidas, mas acesso por índice é mais lento.

[45] Qual é a diferença entre um HashSet e um TreeSet?
`HashSet` não garante ordem e é baseado em tabela de dispersão (hash),
`TreeSet` mantém os elementos ordenados e é baseado em árvore rubro-negra.

[46] Qual é a diferença entre o método “equals()” e o método “hashCode()”?
`equals()` compara se objetos são equivalentes;
`hashCode()` retorna um inteiro usado em estruturas de dados baseadas em hash (precisam ser consistentes).

[47] Qual é a diferença entre uma cópia superficial e uma cópia profunda?
Cópia superficial copia apenas referências dos objetos;
cópia profunda duplica os objetos referenciados, criando cópias independentes.

[48] O que é uma expressão lambda em Java?
É uma forma concisa de representar uma função anônima, geralmente usada em programação funcional e APIs que aceitam interfaces funcionais.

[49] O que é programação funcional em Java?
Estilo em que funções são tratadas como cidadãos de primeira classe, possibilitando passagem de funções como parâmetro, expressões lambda, imutabilidade e ausência de efeitos colaterais.

[50] Quais são os recursos do Java 8 para programação funcional?
Expressões lambda, interface funcional, métodos default, referências a métodos e a API de Streams.

===============================================================================================================

[51] Qual é a diferença entre uma interface e uma classe abstrata?
Classe abstrata pode ter implementação parcial e atributos de classe;
interface define apenas contratos, mas a partir do Java 8 pode ter métodos default e static.

[52] Qual é a finalidade da palavra-chave “default” em métodos de interface?
Permitir que uma interface tenha métodos com implementação padrão, sem obrigar todas as classes que implementam a interface a sobrescrevê-los.

[53] Qual é a diferença entre um BufferedReader e um Scanner?
`BufferedReader` é eficiente para leitura de grandes volumes de texto e lê linhas inteiras;
`Scanner` tem métodos de análise e pode ler diferentes tipos de dados (int, double etc.), além de strings.

[54] Qual é o propósito da classe “StringBuilder” em Java?
Manipular e modificar cadeias de texto de forma eficiente e mutável, sem criar múltiplos objetos como ocorre com `String`.

[55] Qual é a diferença entre as interfaces “Comparable” e “Comparator”?
`Comparable` define a ordem natural do objeto via método `compareTo`,
`Comparator` permite definir diferentes critérios de ordenação externamente à classe.

[56] Qual é o propósito da palavra-chave “assert” em Java?
Permitir a inserção de afirmações (testes) de veracidade em tempo de execução, úteis para depuração.

[57] Qual é a diferença entre uma variável local e uma variável de instância?
Variável local é declarada dentro de métodos e seu escopo é restrito ao método;
variável de instância pertence ao objeto (classe), existindo enquanto o objeto existir.

[58] Qual é o propósito da palavra-chave “transient” em Java?
Indica que um atributo não deve ser serializado, ou seja, não será salvo em streams de objetos.

[59] Qual é a finalidade do bloco “estático” em Java?
Inicializar variáveis estáticas ou executar código ao carregar a classe, antes da criação de instâncias.

[60] Qual é o propósito da palavra-chave “strictfp” em Java?
Garante precisão consistente de operações com ponto flutuante em diferentes plataformas, seguindo o padrão IEEE 754.

===============================================================================================================

[61] Qual é a diferença entre uma classe pública e uma classe padrão (pacote-privada)?
Classe pública (`public`) pode ser acessada de qualquer pacote; classe padrão (sem modificador) só pode ser acessada dentro do mesmo pacote.

[62] Qual é o propósito da palavra-chave “enum” em Java?
Permite declarar um conjunto fixo de constantes (tipos enumerados), representando valores pré-definidos de forma segura e legível.

[63] Qual é o propósito das instruções “break” e “continue” em Java?
`break` encerra a execução do laço mais próximo (for, while, switch). `continue` interrompe a iteração atual e continua para a próxima iteração do laço.

[64] Qual é o propósito da instrução “try-with-resources” em Java?
Usar recursos (como arquivos, conexões) de modo seguro, fechando-os automaticamente ao final do bloco, evitando vazamentos.

[65] Qual é o propósito do operador “instanceof” em Java?
Verifica se um objeto é instância de uma determinada classe ou interface, retornando `true` ou `false`.

[66] Qual é a diferença entre os operadores de pré-incremento e pós-incremento?
Pré-incremento (`++i`): incrementa o valor e depois utiliza. Pós-incremento (`i++`): utiliza o valor e depois incrementa.

[67] Qual é a diferença entre os operadores de pré-decremento e pós-decremento?
Pré-decremento (`--i`): decrementa o valor e depois utiliza. Pós-decremento (`i--`): utiliza o valor e depois decrementa.

[68] Qual é o propósito da classe “Math” em Java?
Oferece métodos e constantes matemáticos, como operações de raiz quadrada, potência, seno, cosseno, valor absoluto, PI.

[69] Qual é o propósito da classe “StringBuffer” em Java?
Permite manipulação eficiente de strings mutáveis com segurança para uso em múltiplas threads (diferente do StringBuilder).

===============================================================================================================

[70] Qual é o propósito do método “Math.random()” em Java?
Gera um número aleatório do tipo `double` entre 0.0 (inclusive) e 1.0 (exclusivo).

[71] Qual é o propósito da classe “Character” em Java?
Manipular e testar valores do tipo caractere, como checagem de letras, números, maiúsculas/minúsculas, etc.

[72] Qual é o propósito da classe “Integer” em Java?
Permite manipular valores inteiros como objetos, facilitando conversão, parsing, comparação e uso em coleções.

[73] Qual é o propósito da classe “Double” em Java?
Equivalente à classe Integer, porém para números de ponto flutuante (double), com métodos utilitários para conversão, parsing, comparação.

[74] Qual é o propósito da classe “System” em Java?
Fornece acesso a recursos do sistema como entrada/saída padrão, propriedades do sistema, e métodos utilitários para manipular o ambiente de execução.

[75] Qual é o propósito da classe “File” em Java?
Representa arquivos e diretórios, permitindo criar, deletar, manipular e obter informações sobre arquivos no sistema.

[76] Qual é o propósito da “FileNotFoundException” em Java?
Exceção lançada quando um arquivo não pôde ser localizado no disco ao tentar abrir para leitura.

[77] Qual é o propósito da “NullPointerException” em Java?
Exceção lançada quando um método ou campo é acessado via referência nula (null).

[78] Qual é o propósito da “ArrayIndexOutOfBoundsException” em Java?
Exceção lançada quando o índice informado é inválido (está fora dos limites) de um array.

[79] Qual é o propósito da “ArithmeticException” em Java?
Exceção lançada em erros de operações aritméticas, como divisão por zero com inteiros.

===============================================================================================================

[80] Qual é o propósito da “NumberFormatException” em Java?
Exceção lançada ao tentar converter uma string para um tipo numérico e ela não possuir um formato válido.

[81] Qual é o propósito da classe “StringBuilder” em Java?
Permite manipulação eficiente de strings mutáveis, ideal para operações intensivas com texto em ambiente não concorrente (não é thread-safe).

[82] Qual é o propósito da classe “HashSet” em Java?
Implementa um conjunto (set) que não aceita elementos duplicados e não garante ordem, baseado em tabela hash para eficiência.

[83] Qual é o propósito da classe “HashMap” em Java?
Estrutura de mapa (dicionário) baseada em hash, que armazena pares chave-valor, permitindo acesso rápido pela chave.

[84] Qual é o propósito da classe “LinkedList” em Java?
Implementa lista duplamente encadeada, permitindo inserções e remoções eficientes nas extremidades; pode ser usada como fila ou pilha.

[85] Qual é o propósito da interface “Comparator” em Java?
Permite definir diferentes formas de ordenar objetos, implementando o método `compare()` para personalizar a ordenação.

[86] Qual é o propósito da interface “Comparable” em Java?
Define a ordem natural de objetos de uma classe através do método `compareTo()`.

[87] Qual é o propósito da palavra-chave “super” em Java?
Permite acessar membros (métodos, atributos ou construtor) da superclasse direta. Fundamental em herança.

[88] Qual é o propósito da palavra-chave “this” em Java?
Refere-se ao próprio objeto atual; diferencia atributos de parâmetros com o mesmo nome.

[89] Qual é o propósito da palavra-chave “final” em Java?
Indica imutabilidade: variável não pode ter seu valor alterado, método não pode ser sobrescrito, classe não pode ser herdada.

[90] Qual é o propósito da palavra-chave “static” em Java?
Indica que o membro pertence à classe e não a uma instância, podendo ser acessado diretamente pela classe.

===============================================================================================================

[91] Qual é o propósito da palavra-chave “abstract” em Java?
Permite declarar classes e métodos que não podem ser instanciados (classe) ou que devem ser implementados obrigatoriamente pelas subclasses (método).

[92] Qual é o propósito da palavra-chave “interface” em Java?
Define um contrato de métodos que as classes devem implementar; fornece abstração e polimorfismo.

[93] Qual é o propósito da palavra-chave “pacote” em Java?
Na verdade, o termo correto em Java é `package`, usado para organizar classes em namespaces, facilitando a modularização e evitando conflitos de nomes.

[94] Qual é o propósito da palavra-chave “import” em Java?
Permite usar classes de outros pacotes sem precisar escrever o caminho completo toda vez.

[95] Qual é o propósito da palavra-chave “throw” em Java?
Usada para lançar explicitamente uma exceção durante a execução do código.

[96] Qual é o propósito da palavra-chave “throws” em Java?
Indica na assinatura de um método que ele pode lançar (propagar) determinada(s) exceção(ões).

[97] Qual é o propósito do bloco “try-catch-finally” em Java?
Permite tratar exceções de forma estruturada: tentar executar um código (`try`), capturar e tratar possíveis exceções (`catch`) e executar um bloco final obrigatoriamente (`finally`).

[98] Qual é o propósito do operador “instanceof” em Java?
Verifica se um objeto é instância de certa classe ou interface, retornando `true` ou `false`.

[99] Qual é o propósito da instrução “break” em Java?
Interrompe a execução do laço ou switch mais próximo, transferindo o controle para a próxima instrução após o laço/switch.

[100] Qual é o propósito da instrução “continue” em Java?
Interrompe a iteração atual de um laço, e inicia a próxima iteração imediatamente.

===============================================================================================================

[101] O que são **Generics** em Java e para que servem?
Permitem criar classes, interfaces e métodos que funcionam com diferentes tipos de dados de forma segura, promovendo reusabilidade e evitando casts desnecessários e erros de tipo em tempo de execução.

[102] O que é e como funciona o **Garbage Collector** em Java?
É um mecanismo automático que gerencia a alocação e liberação de memória, removendo objetos que não estão mais em uso pelo programa, evitando vazamento de memória.

[103] Explique o que é uma **classe interna** (inner class) em Java e quando utilizá-la.
Uma classe definida dentro de outra classe. Serve para organizar o código, encapsular lógica relacionada e, em alguns casos, acessar membros privados da classe externa.

[104] O que é e para que serve o pacote **java.util.concurrent**?
Prover utilitários, classes e interfaces para facilitar programação concorrente segura e eficiente (como pools de threads, locks, semáforos, estruturas thread-safe, etc).

[105] Explique a diferença entre **Queue**, **Deque** e **Stack** na API de Coleções do Java.
- `Queue`: fila (FIFO) — adiciona no final, remove do início.
- `Deque`: fila dupla — pode adicionar/remover em ambos os extremos.
- `Stack`: pilha (LIFO) — adiciona e remove do topo.

[106] O que significa **Imutabilidade** no contexto da classe String em Java?
Instâncias de `String` não podem ser alteradas após serem criadas; qualquer alteração gera um novo objeto. Isso oferece segurança e facilita o uso em ambientes concorrentes.

[107] O que é **Reflection** e quando seu uso é indicado?
Reflection permite inspecionar e manipular informações sobre classes, métodos e atributos em tempo de execução. É útil para frameworks, inversão de controle, ferramentas de serialização, porém deve ser usado com cautela devido ao impacto em segurança e desempenho.

[108] Quais são as vantagens do **Java Stream API** e exemplos de uso comum?
Permite processar coleções de dados de forma declarativa, funcional, paralela e fluente. Usos comuns: filtragem, transformação (map), agregação (reduce), buscas e manipulação de dados.

[109] Explique o papel do **module-info.java** a partir do Java 9.
É o arquivo que define um módulo Java, especificando quais pacotes são expostos (exports) e quais dependências de outros módulos existem (requires). Facilita controle de encapsulamento e modularização do sistema.

[110] O que é o **pattern matching** (correspondência de padrões) no Java moderno?
É uma forma de simplificar operações de verificação de tipos e extração de valores, por exemplo, com `instanceof` aprimorado e switch expressions, facilitando códigos mais simples e seguros para manipular tipos diferentes.

===============================================================================================================




